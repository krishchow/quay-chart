apiVersion: v1
kind: ServiceAccount
metadata:
  name: internal-kubectl  
  namespace: {{ .Values.namespace | default "default" | quote }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: modify-secrets
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "delete"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: modify-secrets-to-sa
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
subjects:
  - kind: ServiceAccount
    name: internal-kubectl
    namespace: {{ .Values.namespace | default "default" | quote }}
roleRef:
  kind: ClusterRole
  name: modify-secrets
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: wait-for-secrets
  namespace: {{ .Values.namespace | default "default" | quote }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 10
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: internal-kubectl
      containers:
      - name: tester
        image: bitnami/kubectl:1.17.3
        command:
        - "bin/bash"
        - "-c"
        - |
          kubectl get secret $s3secret -n $namespace
          while [[ $? -eq 1 ]] || [[ $(kubectl get secret $s3secret -n $namespace | tail -n 1 | awk '{print $3}') -ne 3 ]]
          do
          echo 'Waiting for S3 Bucket'
          sleep 1
          kubectl get secret $s3secret -n $namespace > /dev/null 2>&1
          done
          echo 'S3 done'
          kubectl get secret $redissecret -n $namespace
          while [[ $? -eq 1 ]] || [[ $(kubectl get secret $redissecret -n $namespace | tail -n 1 | awk '{print $3}') -ne 2 ]]
          do
          echo 'Waiting for Redis'
          sleep 1
          kubectl get secret $redissecret -n $namespace > /dev/null 2>&1
          done
          echo 'Redis done'
          kubectl get secret $pgsecret -n $namespace
          while [[ $? -eq 1 ]] || [[ $(kubectl get secret $pgsecret -n $namespace | tail -n 1 | awk '{print $3}') -ne 6 ]]
          do
          echo 'Waiting for Postgres'
          sleep 1
          kubectl get secret $pgsecret -n $namespace > /dev/null 2>&1
          done
          echo 'Postgres done'
        env:
        - name: pgsecret
          value: {{ .Values.postgresSecret | quote }}
        - name: redissecret
          value: {{ .Values.redisSecret | quote }}
        - name: s3secret
          value: {{ .Values.s3Secret | quote }}
        - name: namespace
          value: {{ .Values.namespace | default "default" | quote }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: prep-db
  namespace: {{ .Values.namespace | default "default" | quote }}
spec:
  backoffLimit: 10
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: prep-db
        image: postgres:9.6
        command: ['psql']
        args: ['-c', 'CREATE EXTENSION IF NOT EXISTS pg_trgm;']
        env:
        - name: PGDATABASE
          value: postgres
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresSecret | quote }}
              key: database-server
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresSecret | quote }}
              key: database-username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresSecret | quote }}
              key: database-password
        - name: PGPORT
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresSecret | quote }}
              key: port
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: QuayEcosystem
metadata:
  name: quayecosystem
  namespace: {{ .Values.namespace | default "default" | quote }}
spec:
  quay:
    database:
      credentialsSecretName: {{ .Values.postgresSecret | quote }}
    imagePullSecretName: {{ .Values.pullSecret | quote }}
    registryBackends:
      - name: default
        credentialsSecretName: {{ .Values.s3Secret | quote }}
        s3:
          bucketName: {{ .Values.bucketName | quote }}
          host: {{ printf "s3.%s.amazonaws.com" .Values.region | quote }} 
  redis:
    credentialsSecretName: {{ .Values.redisSecret | quote }}
